import logging
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import BotCommand
from aioredis import Redis
from handlers import student, organizer
from utils.config import TOKEN
from utils.database import init_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π)
redis = Redis(host='redis', port=6379, db=0)
storage = RedisStorage(redis)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=storage)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º RedisStorage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π

# –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(student.router)
dp.include_router(organizer.router)

async def set_commands():
    commands = [
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å"),
        BotCommand(command="/code", description="–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤"),
        BotCommand(command="/spend", description="–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤"),
        BotCommand(command="/top", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"),
        BotCommand(command="/add_admin", description="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand(command="/notify", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º")
    ]
    await bot.set_my_commands(commands)

async def main():
    print("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()  # –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã
    print("üöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!")
    
    await set_commands()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
