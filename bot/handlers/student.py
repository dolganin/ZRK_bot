from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from utils.database import (
    get_balance, 
    add_points, 
    spend_points, 
    get_all_students_rating, 
    is_admin
)
from keyboards.student_keyboards import main_menu

router = Router()

class CodeStates(StatesGroup):
    waiting_for_code = State()
    waiting_for_spend_code = State()

# ========== –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ ==========

@router.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def go_home(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    await state.clear()
    await message.answer("üè† *–í–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*", parse_mode="Markdown", reply_markup=main_menu())

# –ö–æ–º–∞–Ω–¥–∞ /code ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@router.message(Command("code"))
async def cmd_code(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞.", reply_markup=main_menu())
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:")
    await state.set_state(CodeStates.waiting_for_code)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã" (–¥–ª—è —Ä—è–¥–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
@router.message(lambda message: message.text == "üíé –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã")
async def keyboard_get_code(message: types.Message, state: FSMContext):
    text = (
        "üéâ *–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã*\n\n"
        "–ü–æ—Å–µ—â–∞–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è *–î–Ω–µ–π –∫–∞—Ä—å–µ—Ä—ã* –∏ –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π, "
        "—á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã! –¢—ã —Å–º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –∏—Ö –Ω–∞ –∫—Ä—É—Ç–æ–π –º–µ—Ä—á —É–∂–µ *8 –∏ 10 –∞–ø—Ä–µ–ª—è* üéÅ\n\n"
        "üî¢ *–í–≤–µ–¥–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∏–∂–µ:*"
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")]],
        resize_keyboard=True
    )

    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

    await state.set_state(CodeStates.waiting_for_code)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ (–æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –∑–∞–ø—É—Å–∫–∞)
@router.message(CodeStates.waiting_for_code)
async def process_code(message: types.Message, state: FSMContext):

    if message.text == "‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é":
        await go_home(message, state)
        return
    
    user_id = message.from_user.id
    code = message.text.strip()
    points = await add_points(user_id, code)
    if points:
        await message.answer(
            f"‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {await get_balance(user_id)} –±–∞–ª–ª–æ–≤.", reply_markup=main_menu()
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ö–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –û–∂–∏–¥–∞—é —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=main_menu())
    await state.clear()

# ========== –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤ ==========

# –ö–æ–º–∞–Ω–¥–∞ /spend ‚Äî —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤
@router.message(Command("spend"))
async def cmd_spend(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ–±–º–µ–Ω–∞ –±–∞–ª–ª–æ–≤ –Ω–∞ –º–µ—Ä—á:")
    await state.set_state(CodeStates.waiting_for_spend_code)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã" (–¥–ª—è –≤—Å–µ—Ö)
@router.message(lambda message: message.text == "üí∏ –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã")
async def keyboard_spend(message: types.Message, state: FSMContext):
    """–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –æ–±–º–µ–Ω–∞ –±–∞–ª–ª–æ–≤ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–¥."""
    user_id = message.from_user.id
    balance = await get_balance(user_id)
    text = (
    "üéÅ *–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã*\n\n"
    "–û–±–º–µ–Ω–∏–≤–∞–π —Å–≤–æ–∏ –±–∞–ª–ª—ã –Ω–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –º–µ—Ä—á –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –Ω–∞ *—Å—Ç–µ–Ω–¥–æ–≤—ã—Ö —Å–µ—Å—Å–∏—è—Ö –î–Ω–µ–π –∫–∞—Ä—å–µ—Ä—ã*:\n"
    "üìÖ *8 –∞–ø—Ä–µ–ª—è* —Å *15:00* –¥–æ *19:00* –≤ *–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ –ù–ì–£*\n"
    "üìÖ *10 –∞–ø—Ä–µ–ª—è* —Å *15:00* –¥–æ *19:00* –≤ *–£—á–µ–±–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ –ù–ì–£*\n\n"
    f"üí∞ *–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:* {balance} –±–∞–ª–ª–æ–≤\n\n"
    "üî¢ *–í–≤–µ–¥–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∏–∂–µ:*"
)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")]],
        resize_keyboard=True
    )

    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    await state.set_state(CodeStates.waiting_for_spend_code)

@router.message(CodeStates.waiting_for_spend_code)
async def process_spend(message: types.Message, state: FSMContext):

    if message.text == "‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é":
        await go_home(message, state)
        return
    
    user_id = message.from_user.id
    code = message.text.strip()
    success = await spend_points(user_id, code)
    if success:
        await message.answer(
            f"‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –ë–∞–ª–ª—ã —Å–ø–∏—Å–∞–Ω—ã.\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {await get_balance(user_id)} –±–∞–ª–ª–æ–≤.", reply_markup=main_menu()
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ö–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –û–∂–∏–¥–∞—é —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=main_menu())
    await state.clear()

# ========== –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞ ==========

# –ö–æ–º–∞–Ω–¥–∞ /top ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞
@router.message(Command("top"))
async def cmd_top(message: types.Message):
    students = await get_all_students_rating(user_id=message.from_user.id)
    response = ["üî• –¢–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"+
            "–ü–æ—Å–µ—â–∞–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –î–Ω–µ–π –∫–∞—Ä—å–µ—Ä—ã –∏ –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤.\n"+
            "–õ–∏–¥–µ—Ä—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—É—á–∞—Ç –æ—Å–æ–±—ã–µ –ø—Ä–∏–∑—ã –æ—Ç –¶–µ–Ω—Ç—Ä–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –∫–∞—Ä—å–µ—Ä—ã:\n\n"]
    for idx, student in enumerate(students, 1):
        response.append(f"{idx}. {student['name']} - {student['balance']} –±–∞–ª–ª–æ–≤")
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")]],
        resize_keyboard=True
    )

    await message.answer("\n".join(response), reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–†–µ–π—Ç–∏–Ω–≥"
@router.message(lambda message: message.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
async def keyboard_top(message: types.Message):
    students = await get_all_students_rating(user_id=message.from_user.id)
    response = ["üî• –¢–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"+
                "–ü–æ—Å–µ—â–∞–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –î–Ω–µ–π –∫–∞—Ä—å–µ—Ä—ã –∏ –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤.\n"+
                "–õ–∏–¥–µ—Ä—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—É—á–∞—Ç –æ—Å–æ–±—ã–µ –ø—Ä–∏–∑—ã –æ—Ç –¶–µ–Ω—Ç—Ä–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –∫–∞—Ä—å–µ—Ä—ã:\n\n"]
    for idx, student in enumerate(students, 1):
        response.append(f"{idx}. {student['name']} - {student['balance']} –±–∞–ª–ª–æ–≤")
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")]],
        resize_keyboard=True
    )

    await message.answer("\n".join(response), reply_markup=keyboard)

# ========== –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–ü—Ä–æ–≥—Ä–∞–º–º–∞, –ö–∞—Ä—Ç–∞) ==========


@router.message(lambda message: message.text == "üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞")
async def keyboard_program(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", url="https://t.me/careerdaynsu2025")]
    ])
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ:", reply_markup=keyboard)

@router.message(lambda message: message.text == "üó∫ –ö–∞—Ä—Ç–∞")
async def keyboard_map(message: types.Message):
    await message.answer("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è...", reply_markup=main_menu())


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    user_id = message.from_user.id
    if await is_admin(user_id):
        help_text = (
            "üõ† –ê–¥–º–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞:\n\n"
            "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n"
            "/code ‚Äî –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤\n"
            "/spend ‚Äî –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤\n"
            "üìä –†–µ–π—Ç–∏–Ω–≥ ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞, –≤—ã–≤–µ–¥–µ—Ç—Å—è –≤–µ—Å—å —Ç–æ–ø, –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ\n"
            "üë• –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ id (–≤–¥—Ä—É–≥ –≤—ã –µ–≥–æ –∑–Ω–∞–µ—Ç–µ)\n"
            "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º (–ù–ï –ü–†–û–ñ–ò–ú–ê–ô–¢–ï –ü–†–û–°–¢–û –¢–ê–ö, –û–¢–ü–†–ê–í–ò–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –í–°–ï–ú!!!)\n"
            "üîë –°–æ–∑–¥–∞—Ç—å –∫–æ–¥ ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ (—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é SHA256)\n"
            "üéØ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)\n"
            "üîë –ö–æ–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é ‚Äî –ø—Ä–∏–≤—è–∑–∫–∞ –∫–æ–¥–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤\n"
            "üìú –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã - —Å–ø–∏—Å–æ–∫ –í–°–ï–• –∫–æ–¥–æ–≤, —á—Ç–æ –Ω–µ —É–¥–∞–ª–µ–Ω—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –Ω–∏–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π)\n"
            "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º."
        )
    else:
        help_text = (
            "üìö –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n"
            "/code ‚Äî –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ (—á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)\n"
            "/spend ‚Äî –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ (—á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)\n"
            "/top ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞\n"
            "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
        )
    await message.answer(help_text, parse_mode="HTML", reply_markup=main_menu())
