from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from utils.database import (
    get_balance, 
    register_student, 
    add_points, 
    spend_points, 
    get_top_students, 
    is_admin
)
from keyboards.student_keyboards import main_menu

router = Router()

class CodeStates(StatesGroup):
    waiting_for_code = State()
    waiting_for_spend_code = State()

# /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await register_student(user_id, user_name):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=main_menu())
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=main_menu())

# ========== –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ ==========

# –ö–æ–º–∞–Ω–¥–∞ /code ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@router.message(Command("code"))
async def cmd_code(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:")
    await state.set_state(CodeStates.waiting_for_code)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã" (–¥–ª—è —Ä—è–¥–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
@router.message(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã")
async def keyboard_get_code(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:")
    await state.set_state(CodeStates.waiting_for_code)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ (–æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –∑–∞–ø—É—Å–∫–∞)
@router.message(CodeStates.waiting_for_code)
async def process_code(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    code = message.text.strip()
    points = await add_points(user_id, code)
    if points:
        await message.answer(
            f"‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {await get_balance(user_id)} –±–∞–ª–ª–æ–≤."
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ö–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –û–∂–∏–¥–∞—é —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã.")
    await state.clear()

# ========== –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤ ==========

# –ö–æ–º–∞–Ω–¥–∞ /spend ‚Äî —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤
@router.message(Command("spend"))
async def cmd_spend(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ–±–º–µ–Ω–∞ –±–∞–ª–ª–æ–≤ –Ω–∞ –º–µ—Ä—á:")
    await state.set_state(CodeStates.waiting_for_spend_code)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã" (–¥–ª—è –≤—Å–µ—Ö)
@router.message(lambda message: message.text == "–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã")
async def keyboard_spend(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ–±–º–µ–Ω–∞ –±–∞–ª–ª–æ–≤ –Ω–∞ –º–µ—Ä—á:")
    await state.set_state(CodeStates.waiting_for_spend_code)

@router.message(CodeStates.waiting_for_spend_code)
async def process_spend(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    code = message.text.strip()
    success = await spend_points(user_id, code)
    if success:
        await message.answer(
            f"‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –ë–∞–ª–ª—ã —Å–ø–∏—Å–∞–Ω—ã.\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {await get_balance(user_id)} –±–∞–ª–ª–æ–≤."
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ö–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –û–∂–∏–¥–∞—é —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã.")
    await state.clear()

# ========== –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞ ==========

# –ö–æ–º–∞–Ω–¥–∞ /top ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞
@router.message(Command("top"))
async def cmd_top(message: types.Message):
    top_list = await get_top_students()
    leaderboard = "\n".join([f"{i+1}. {name} ‚Äî {points} –±–∞–ª–ª–æ–≤" for i, (name, points) in enumerate(top_list)])
    await message.answer(f"üî• –¢–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n{leaderboard}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–†–µ–π—Ç–∏–Ω–≥"
@router.message(lambda message: message.text == "–†–µ–π—Ç–∏–Ω–≥")
async def keyboard_top(message: types.Message):
    top_list = await get_top_students()
    leaderboard = "\n".join([f"{i+1}. {name} ‚Äî {points} –±–∞–ª–ª–æ–≤" for i, (name, points) in enumerate(top_list)])
    await message.answer(f"üî• –¢–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n{leaderboard}")

# ========== –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–ü—Ä–æ–≥—Ä–∞–º–º–∞, –ö–∞—Ä—Ç–∞) ==========

@router.message(lambda message: message.text == "–ü—Ä–æ–≥—Ä–∞–º–º–∞")
async def keyboard_program(message: types.Message):
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è...")

@router.message(lambda message: message.text == "–ö–∞—Ä—Ç–∞")
async def keyboard_map(message: types.Message):
    await message.answer("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è...")
