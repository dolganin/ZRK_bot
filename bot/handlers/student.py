from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from utils.database import get_balance, register_student, add_points, spend_points, get_top_students
from keyboards.student_keyboards import main_menu

router = Router()
storage = MemoryStorage()

class CodeStates(StatesGroup):
    waiting_for_code = State()
    waiting_for_spend_code = State()

# –ö–æ–º–∞–Ω–¥–∞ /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if not await register_student(user_id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=main_menu())
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")

# –ö–æ–º–∞–Ω–¥–∞ /code - –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
@router.message(Command("code"))
async def cmd_code(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:")
    await state.set_state(CodeStates.waiting_for_code)

@router.message(CodeStates.waiting_for_code)
async def process_code(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    code = message.text.strip()
    points = await add_points(user_id, code)
    if points:
        await message.answer(f"‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {await get_balance(user_id)} –±–∞–ª–ª–æ–≤.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ö–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –û–∂–∏–¥–∞—é —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã.")
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /spend - —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤
@router.message(Command("spend"))
async def cmd_spend(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ–±–º–µ–Ω–∞ –±–∞–ª–ª–æ–≤ –Ω–∞ –º–µ—Ä—á:")
    await state.set_state(CodeStates.waiting_for_spend_code)

@router.message(CodeStates.waiting_for_spend_code)
async def process_spend(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    code = message.text.strip()
    success = await spend_points(user_id, code)
    if success:
        await message.answer(f"‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –ë–∞–ª–ª—ã —Å–ø–∏—Å–∞–Ω—ã.\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {await get_balance(user_id)} –±–∞–ª–ª–æ–≤.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ö–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –û–∂–∏–¥–∞—é —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã.")
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /top - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞
@router.message(Command("top"))
async def cmd_top(message: types.Message):
    top_list = await get_top_students()
    leaderboard = "\n".join([f"{i+1}. {name} ‚Äî {points} –±–∞–ª–ª–æ–≤" for i, (name, points) in enumerate(top_list)])
    await message.answer(f"üî• –¢–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n{leaderboard}")
