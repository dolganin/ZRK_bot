import secrets
import string
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.database import (
    is_admin, get_all_students_rating,
    get_active_codes, add_event, get_events,
    add_code_to_event, add_admin, send_notification,
    check_code_exists, asyncpg
)

router = Router()

class OrganizerStates(StatesGroup):
    waiting_for_notification = State()
    waiting_for_admin_id = State()
    waiting_for_event_name = State()
    waiting_for_event_id = State()
    waiting_for_code_points = State()
    waiting_for_code_type = State()
    waiting_for_code = State()

# ======================= –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–î–û–í =======================
def generate_random_code(length: int = 100) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä"""
    characters = string.ascii_letters + string.digits
    return ''.join(secrets.choice(characters) for _ in range(length))

async def generate_unique_code(length: int = 100) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤ –ë–î"""
    while True:
        code = generate_random_code(length)
        if not await check_code_exists(code):
            return code

@router.message(Command("generate_code"))
async def cmd_generate_code(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ 100-—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
    if not await is_admin(message.from_user.id):
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    try:
        code = await generate_unique_code()
        response = (
            "üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥:\n\n"
            f"<code>{code}</code>\n\n"
            "‚ùóÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!"
        )
        await message.answer(response, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {str(e)}")

# ======================= –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =======================
@router.message(Command("notify"))
async def cmd_notify(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º"""
    if not await is_admin(message.from_user.id):
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    await message.answer("üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    await state.set_state(OrganizerStates.waiting_for_notification)

@router.message(OrganizerStates.waiting_for_notification)
async def process_notify(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    await send_notification(message.text)
    await message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º!")
    await state.clear()

@router.message(Command("add_admin"))
async def cmd_add_admin(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not await is_admin(message.from_user.id):
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    await message.answer("üë®üíª –í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(OrganizerStates.waiting_for_admin_id)

@router.message(OrganizerStates.waiting_for_admin_id)
async def process_add_admin(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        user_id = int(message.text)
        await add_admin(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã!")
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    finally:
        await state.clear()

# ======================= –†–ï–ô–¢–ò–ù–ì –ò –ö–û–î–´ =======================
@router.message(Command("top_all"))
async def cmd_top_all(message: types.Message):
    """–ü–æ–∫–∞–∑ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    if not await is_admin(message.from_user.id):
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    students = await get_all_students_rating()
    response = ["üèÜ –ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:"]
    for idx, student in enumerate(students, 1):
        response.append(f"{idx}. {student['name']}: {student['balance']} –±–∞–ª–ª–æ–≤")
    
    await message.answer("\n".join(response))

@router.message(Command("active_codes"))
async def cmd_active_codes(message: types.Message):
    """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤"""
    if not await is_admin(message.from_user.id):
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    codes = await get_active_codes()
    if not codes:
        return await message.answer("üîê –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤")
    
    response = ["üîë –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã:"]
    for code in codes:
        response.append(
            f"\n–ö–æ–¥: {code['code']}\n"
            f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {code['event_name']}\n"
            f"–ë–∞–ª–ª—ã: {code['points']} ({'‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' if code['is_income'] else '‚ûñ –°–ø–∏—Å–∞–Ω–∏–µ'})"
        )
    
    await message.answer("\n".join(response))

# ======================= –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø –ò –ö–û–î–´ =======================
@router.message(Command("add_event"))
async def cmd_add_event(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    if not await is_admin(message.from_user.id):
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(OrganizerStates.waiting_for_event_name)

@router.message(OrganizerStates.waiting_for_event_name)
async def process_event_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    await add_event(message.text)
    await message.answer(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´{message.text}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    await state.clear()

@router.message(Command("add_code"))
async def cmd_add_code(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é"""
    if not await is_admin(message.from_user.id):
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    events = await get_events()
    if not events:
        return await message.answer("‚ùå –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ–¥–∞")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{e['id']}. {e['name']}", callback_data=f"event_{e['id']}")]
        for e in events
    ])
    
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=keyboard)
    await state.set_state(OrganizerStates.waiting_for_event_id)

@router.callback_query(OrganizerStates.waiting_for_event_id, F.data.startswith("event_"))
async def select_event(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split("_")[1])
    event = await get_events(event_id)
    
    if not event:
        await callback.message.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return await state.clear()
    
    await state.update_data(event_id=event_id)
    await callback.message.answer(f"üõ† –°–æ–∑–¥–∞–µ–º –∫–æ–¥ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event['name']}\n"
                                   "‚û° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:")
    await state.set_state(OrganizerStates.waiting_for_code_points)
    await callback.answer()

@router.message(OrganizerStates.waiting_for_code_points)
async def input_points(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤"""
    try:
        points = abs(int(message.text))
        if points == 0:
            raise ValueError
        await state.update_data(points=points)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤", callback_data="type_income")],
            [InlineKeyboardButton(text="–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤", callback_data="type_outcome")]
        ])
        
        await message.answer("üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=keyboard)
        await state.set_state(OrganizerStates.waiting_for_code_type)
    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")

@router.callback_query(OrganizerStates.waiting_for_code_type, F.data.startswith("type_"))
async def select_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    operation_type = callback.data.split("_")[1]
    is_income = operation_type == "income"
    
    await state.update_data(is_income=is_income)
    await callback.message.answer("üî† –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):")
    await state.set_state(OrganizerStates.waiting_for_code)
    await callback.answer()

@router.message(OrganizerStates.waiting_for_code)
async def input_code(message: types.Message, state: FSMContext):
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞"""
    data = await state.get_data()
    code = message.text.strip().upper()
    
    if not code.isalnum() or len(code) < 4:
        return await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã –∏ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 4 —Å–∏–º–≤–æ–ª–æ–≤")
    
    try:
        await add_code_to_event(
            event_id=data['event_id'],
            code=code,
            points=data['points'],
            is_income=data['is_income']
        )
        await message.answer(f"‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                             f"üîë {code} | {'‚ûï ' if data['is_income'] else '‚ûñ '}{data['points']} –±–∞–ª–ª–æ–≤")
    except asyncpg.exceptions.UniqueViolationError:
        await message.answer("‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    await state.clear()