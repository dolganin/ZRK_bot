import secrets
import string
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards.organizer_keyboards import organizer_menu
from keyboards.student_keyboards import main_menu
import logging

from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from utils.database import (
    is_admin,
    get_all_students_rating,
    get_codes_usage,
    add_event,
    get_events,
    add_code_to_event,
    add_admin,
    send_notification,
    check_code_exists,
    asyncpg,
    delete_code,
    delete_event
)

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞

class OrganizerStates(StatesGroup):
    waiting_for_notification = State()
    waiting_for_admin_id = State()
    waiting_for_event_name = State()
    waiting_for_event_id = State()
    waiting_for_code_points = State()
    waiting_for_code_type = State()
    waiting_for_code = State()
    waiting_for_action = State()
    waiting_for_code_to_delete = State ()
    waiting_for_event_action = State ()
    waiting_for_event_to_delete = State ()
    waiting_for_rating_limit = State()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
def generate_random_code(length: int = 10) -> str:
    characters = string.ascii_letters + string.digits
    return ''.join(secrets.choice(characters) for _ in range(length))

async def generate_unique_code(length: int = 10) -> str:
    while True:
        code = generate_random_code(length)
        if not await check_code_exists(code):
            return code

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

def rating_menu():
    buttons = [
        [types.KeyboardButton(text="10 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")],
        [types.KeyboardButton(text="50 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")],
        [types.KeyboardButton(text="–í–µ—Å—å —Å–ø–∏—Å–æ–∫")]
    ]
    markup = types.ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return markup

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞Started –ø–æ —Ç–µ–∫—Å—Ç—É "üìä –†–µ–π—Ç–∏–Ω–≥"
@router.message(F.text == "üìä –†–µ–π—Ç–∏–Ω–≥")
async def show_rating(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu())
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å:", reply_markup=rating_menu())
    await state.set_state(OrganizerStates.waiting_for_rating_limit)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
@router.message(OrganizerStates.waiting_for_rating_limit)
async def handle_rating_limit(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.text == "10 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤":
        limit = 10
    elif message.text == "50 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤":
        limit = 50
    elif message.text == "–í–µ—Å—å —Å–ø–∏—Å–æ–∫":
        limit = None
    else:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –ø—Ä–µ–¥VR Âåª kolebctime –∑–Ω–∞—á–µ–Ω–∏–µ
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä!", reply_markup=rating_menu())
        return
    
    rating = await get_all_students_rating(limit)
    
    # –ï—Å–ª–∏ –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ N —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    if limit:
        rating_text = f"üî•–†–µ–π—Ç–∏–Ω–≥ (—Ç–æ–ø {limit} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤):\n"
    else:
        rating_text = "üî•–ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    for place, student in enumerate(rating, 1):
        rating_text += f"{place}. {student['name']} - {student['balance']}\n"
    
    await message.answer(rating_text, reply_markup=organizer_menu())
    await state.clear()

@router.message(F.text == "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
async def start_notify(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu())
        return
    
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrganizerStates.waiting_for_notification)

@router.message(OrganizerStates.waiting_for_notification)
async def process_notify(message: types.Message, state: FSMContext):
    await send_notification(message.text)
    await message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=organizer_menu())
    await state.clear()

@router.message(F.text == "üîë –°–æ–∑–¥–∞—Ç—å –∫–æ–¥")
async def generate_code_handler(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu())
        return
    
    try:
        code = await generate_unique_code()
        await message.answer(
            f"üîê –ù–æ–≤—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:\n<code>{code}</code>\n\n"
            "‚ùóÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!",
            parse_mode="HTML",
            reply_markup=organizer_menu()
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=organizer_menu())

@router.message(F.text == "üéØ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def manage_event(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu())
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="action_add_event")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="action_delete_event")]
    ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.set_state(OrganizerStates.waiting_for_event_action)

@router.callback_query(OrganizerStates.waiting_for_event_action, F.data.startswith("action_"))
async def select_event_action(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]

    if action == "add":
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(OrganizerStates.waiting_for_event_name)
    elif action == "delete":
        events = await get_events()
        if not events:
            return await callback.message.answer("‚ùå –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=organizer_menu())

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{event['name']}", callback_data=f"delete_event_{event['id']}")]
            for event in events
        ])

        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        await state.set_state(OrganizerStates.waiting_for_event_to_delete)

    await callback.answer()

@router.message(OrganizerStates.waiting_for_event_name)
async def process_event_name(message: types.Message, state: FSMContext):
    await add_event(message.text)
    await message.answer(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{message.text}' —Å–æ–∑–¥–∞–Ω–æ!", reply_markup=organizer_menu())
    await state.clear()

@router.callback_query(OrganizerStates.waiting_for_event_to_delete, F.data.startswith("delete_event_"))
async def delete_event_callback(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[2])

    try:
        await delete_event(event_id)
        await callback.message.answer(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=organizer_menu())
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {str(e)}", reply_markup=organizer_menu())
    finally:
        await state.clear()
    await callback.answer()



@router.message(F.text == "üë• –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def start_add_admin(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu())
        return
    
    await message.answer("üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrganizerStates.waiting_for_admin_id)

@router.message(OrganizerStates.waiting_for_admin_id)
async def process_add_admin(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await add_admin(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=organizer_menu())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID", reply_markup=organizer_menu())
    finally:
        await state.clear()



@router.message(F.text == "üìú –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã")
async def show_active_codes(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu())
        return

    codes = await get_codes_usage()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ —Å –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    if not codes:
        return await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤", reply_markup=organizer_menu())

    response = ["üîë –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã:\n"]
    for code in codes:
        response.append(
            f"\nüî∏ –ö–æ–¥: {code['code']}\n"
            f"üè∑Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {code['event_name']}\n"
            f"üíµ –ë–∞–ª–ª—ã: {code['points']} ({'‚ûï' if code['is_income'] else '‚ûñ'})\n"
            f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {code['usage_count']}"  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        )

    await message.answer("\n".join(response), reply_markup=organizer_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(F.text == "üîë –ö–æ–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é")
async def cmd_manage_code(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu())
        return

    events = await get_events()
    if not events:
        return await message.answer("‚ùå –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", reply_markup=organizer_menu())

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{e['id']}. {e['name']}", callback_data=f"event_{e['id']}")]
        for e in events
    ])

    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=keyboard)
    await state.set_state(OrganizerStates.waiting_for_event_id)

@router.callback_query(OrganizerStates.waiting_for_event_id, F.data.startswith("event_"))
async def select_event(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[1])
    event = await get_events(event_id)

    if not event:
        await callback.message.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return await state.clear()

    await state.update_data(event_id=event_id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥", callback_data="action_add")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–æ–¥", callback_data="action_delete")]
    ])

    await callback.message.answer(
        f"üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞–º–∏ –¥–ª—è: {event['name']}\n"
        "‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await state.set_state(OrganizerStates.waiting_for_action)
    await callback.answer()

@router.callback_query(OrganizerStates.waiting_for_action, F.data.startswith("action_"))
async def select_action(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]

    if action == "add":
        await callback.message.answer("‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(OrganizerStates.waiting_for_code_points)
    elif action == "delete":
        codes = await get_codes_usage(event_id=(await state.get_data())['event_id'])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_codes_usage –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–¥–æ–≤
        if not codes:
            return await callback.message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=organizer_menu())

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{code['code']} ({code['points']} –±–∞–ª–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {code['usage_count']} —Ä–∞–∑, {'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' if code['is_income'] else '–°–ø–∏—Å–∞–Ω–∏–µ'})",
                    callback_data=f"delete_code_{code['code']}"
                )
            ]
            for code in codes
        ])

        await callback.message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        await state.set_state(OrganizerStates.waiting_for_code_to_delete)

    await callback.answer()


@router.message(OrganizerStates.waiting_for_code_points)
async def input_points(message: types.Message, state: FSMContext):
    try:
        points = abs(int(message.text))
        if points == 0:
            raise ValueError
        await state.update_data(points=points)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚ûï", callback_data="type_income")],
            [InlineKeyboardButton(text="–°–ø–∏—Å–∞–Ω–∏–µ ‚ûñ", callback_data="type_outcome")]
        ])

        await message.answer("üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=keyboard)
        await state.set_state(OrganizerStates.waiting_for_code_type)
    except (ValueError, TypeError):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")

@router.callback_query(OrganizerStates.waiting_for_code_type, F.data.startswith("type_"))
async def select_type(callback: types.CallbackQuery, state: FSMContext):
    operation_type = callback.data.split("_")[1]
    is_income = operation_type == "income"

    await state.update_data(is_income=is_income)
    await callback.message.answer("üî† –í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã):", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrganizerStates.waiting_for_code)
    await callback.answer()

@router.message(OrganizerStates.waiting_for_code)
async def input_code(message: types.Message, state: FSMContext):
    data = await state.get_data()
    code = message.text.strip().upper()

    if not code.isalnum() or len(code) < 4:
        return await message.answer(
            "‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã –∏ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 4 —Å–∏–º–≤–æ–ª–æ–≤"
        )

    try:
        await add_code_to_event(
            event_id=data['event_id'],
            code=code,
            points=data['points'],
            is_income=data['is_income']
        )
        operation_type = "‚ûï" if data['is_income'] else "‚ûñ"
        await message.answer(
            f"‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"üîë {code} | {operation_type} {data['points']} –±–∞–ª–ª–æ–≤",
            reply_markup=organizer_menu()
        )
    except asyncpg.exceptions.UniqueViolationError:
        await message.answer("‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=organizer_menu())
    finally:
        await state.clear()

@router.callback_query(OrganizerStates.waiting_for_code_to_delete, F.data.startswith("delete_code_"))
async def select_code_to_delete(callback: types.CallbackQuery, state: FSMContext):
    code_to_delete = callback.data.split("_")[2]

    try:
        await delete_code(code_to_delete)
        await callback.message.answer(f"‚úÖ –ö–æ–¥ {code_to_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=organizer_menu())
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–¥–∞: {str(e)}", reply_markup=organizer_menu())
    finally:
        await state.clear()
    await callback.answer()

@router.callback_query(OrganizerStates.waiting_for_event_to_delete, F.data.startswith("delete_event_"))
async def delete_event_callback(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[2])

    try:
        await delete_event(event_id)
        await callback.message.answer(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=organizer_menu())
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {str(e)}", reply_markup=organizer_menu())
    finally:
        await state.clear()
    await callback.answer()
