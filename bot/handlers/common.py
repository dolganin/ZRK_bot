from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from keyboards.student_keyboards import main_menu
from utils.database import is_admin, get_balance, register_student
from keyboards.organizer_keyboards import organizer_menu

import logging

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

router = Router()

# –°—Ç–µ–π—Ç-–º–∞—à–∏–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationState(StatesGroup):
    waiting_for_name = State()
    waiting_for_course = State()
    waiting_for_faculty = State()

# –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    current_state = await state.get_state()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞—Ä—å–µ—Ä–Ω—ã–π –∫–≤–µ—Å—Ç –ù–ì–£ 2025! üëã\n\n" \
           "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –§–ò–û."

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –§–ò–û
    await message.answer(text)
    await state.set_state(RegistrationState.waiting_for_name)


@router.message(RegistrationState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –§–ò–û
    user_name = message.text
    await state.update_data(name=user_name)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫—É—Ä—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏
    text = "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫—É—Ä—Å–æ–≤
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1 –∫—É—Ä—Å"), KeyboardButton(text="2 –∫—É—Ä—Å")],
            [KeyboardButton(text="3 –∫—É—Ä—Å"), KeyboardButton(text="4 –∫—É—Ä—Å")],
            [KeyboardButton(text="5 –∫—É—Ä—Å"), KeyboardButton(text="–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞")],
            [KeyboardButton(text="–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞"), KeyboardButton(text="–í—ã–ø—É—Å–∫–Ω–∏–∫")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(text, reply_markup=keyboard)
    await state.set_state(RegistrationState.waiting_for_course)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä—Å–∞
@router.message(RegistrationState.waiting_for_course)
async def process_course(message: types.Message, state: FSMContext):
    course = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É—Ä—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    valid_courses = [
        "1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å", "3 –∫—É—Ä—Å", "4 –∫—É—Ä—Å", "5 –∫—É—Ä—Å",
        "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞", "–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞", "–í—ã–ø—É—Å–∫–Ω–∏–∫"
    ]
    if course not in valid_courses:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å
    await state.update_data(course=course)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ò–ò–†"), KeyboardButton(text="–§–ï–ù")],
            [KeyboardButton(text="–§–§"), KeyboardButton(text="–ò–ú–ü–ó")],
            [KeyboardButton(text="–§–ò–¢"), KeyboardButton(text="–ú–ú–§")],
            [KeyboardButton(text="–ì–ò"), KeyboardButton(text="–§–ò–Ø")],
            [KeyboardButton(text="–ò–§–ü"), KeyboardButton(text="–ì–ì–§")],
            [KeyboardButton(text="–≠–§"), KeyboardButton(text="–ü–ò–®")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    text = "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:"
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(RegistrationState.waiting_for_faculty)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
@router.message(RegistrationState.waiting_for_faculty)
async def process_faculty(message: types.Message, state: FSMContext):
    faculty = message.text
    valid_faculties = [
        "–ò–ò–†", "–§–ï–ù", "–§–§", "–ò–ú–ü–ó", "–§–ò–¢", "–ú–ú–§",
        "–ì–ò", "–§–ò–Ø", "–ò–§–ü", "–ì–ì–§", "–≠–§", "–ü–ò–®"
    ]
    
    if faculty not in valid_faculties:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
    await state.update_data(faculty=faculty)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()
    name = user_data['name']
    course = user_data['course']
    faculty = user_data['faculty']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    username = message.from_user.username

    logger.info(user_id)

    await register_student(user_id, name, username, course, faculty)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    text = f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n" \
           f"–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫:\n\n" \
           f"–§–ò–û: {name}\n" \
           f"–ö—É—Ä—Å: {course}\n" \
           f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {faculty}\n\n" \
           "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ö–∞—Ä—å–µ—Ä–Ω–æ–º –∫–≤–µ—Å—Ç–µ –ù–ì–£ 2025! üöÄ"
    
    keyboard = organizer_menu() if is_user_admin else main_menu()
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown", disable_web_page_preview=True)
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /home - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(Command("home"))
async def cmd_home(message: types.Message):
    user_id = message.from_user.id
    balance = await get_balance(user_id)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_user_admin = await is_admin(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        "üì∏ [–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É]\n\n"
        "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ö–∞—Ä—å–µ—Ä–Ω—ã–π –∫–≤–µ—Å—Ç –ù–ì–£ 2025 üëã\n\n"
        f"üèÖ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: *{balance}* –±–∞–ª–ª–æ–≤\n\n"
        "–° 3 –º–∞—Ä—Ç–∞ –ø–æ 10 –∞–ø—Ä–µ–ª—è –ø–æ–ª—É—á–∞–π –±–∞–ª–ª—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –î–Ω—è—Ö –∫–∞—Ä—å–µ—Ä—ã –ù–ì–£ "
        "–∏ –æ–±–º–µ–Ω–∏–≤–∞–π –∏—Ö –Ω–∞ –∫—Ä—É—Ç–æ–π –º–µ—Ä—á –æ—Ç –∫–æ–º–ø–∞–Ω–∏–π! üöÄ\n\n"
        "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n"
        "‚úÖ –ü–æ—Å–µ—â–∞–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –ª–µ–∫—Ü–∏–∏ –∏ —ç–∫—Å–ø—Ä–µ—Å—Å-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è\n"
        "‚úÖ –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å—Ç–µ–Ω–¥–∞—Ö –∫–æ–º–ø–∞–Ω–∏–π\n"
        "‚úÖ –ù–∞–±–∏—Ä–∞–π –±–∞–ª–ª—ã –∏ –º–µ–Ω—è–π –∏—Ö –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏! üéÅ\n\n"
        "–¢–≤–æ—è —Ü–µ–ª—å ‚Äì –Ω–µ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω–æ –∏ –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø! üí™ "
        "–ß–µ–º –∞–∫—Ç–∏–≤–Ω–µ–µ —Ç—ã, —Ç–µ–º –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ –∏ –∫—Ä—É—Ç—ã—Ö –ø—Ä–∏–∑–æ–≤!\n\n"
        "üîπ –ü–æ—Å–º–æ—Ç—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –Ω–∞—á–∏–Ω–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã! üèÜ"
    )

    keyboard = organizer_menu() if is_user_admin else main_menu()
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown", disable_web_page_preview=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@router.message()
async def unknown_command(message: types.Message):
    await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help.")
